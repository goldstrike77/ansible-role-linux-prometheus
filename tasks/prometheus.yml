---
- name: Generate IP address filter
  set_fact:
    ip_sequence: "{{ ip_sequence | default([]) + [item[-1] | int] }}"
  with_sequence: start={{ prometheus_server.index(ansible_default_ipv4.address) }} end={{ prometheus_server | length * 4 }} stride=2
  args:
    warn: false
  changed_when: false
  failed_when: false
  ignore_errors: true

- name: Creating prometheus configure folder
  file:
    dest: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: 0755
  with_items:
    - '{{ prometheus_conf_path }}/rules'
    - '{{ prometheus_conf_path }}/templates'
    - '{{ prometheus_conf_path }}/conf.d'

- name: Creating prometheus data folder
  file:
    dest: '{{ item }}'
    state: directory
    owner: prometheus
    group: prometheus
    mode: 0755
  with_items:
    - '{{ prometheus_data_path }}/prometheus'
    - '{{ prometheus_data_path }}/alertmanager'

- name: Prometheus configure file transfer
  template:
    src: '{{ item.src }}'
    dest: '{{ item.dest }}'
    owner: 'root'
    group: 'root'
    mode: 0644
  with_items:
    - '{{ prometheus_conf_files }}'
  register: soft_config

- name: Include rules for alertmanager
  include_vars:
    file: 'alert_rules/{{ item }}.yml'
  with_items:
    - '{{ prometheus_alert_rules }}'
  when:
    - prometheus_alert_rules != []

- name: Prometheus alerting template file transfer
  copy:
    src: "default.tmpl"
    dest: "{{ prometheus_conf_path }}/templates/default.tmpl"
    owner: root
    group: root
    mode: 0644
  notify: 'Reload prometheus service'

- name: Prometheus alerting rules file transfer
  template:
    src: "alert.rules.j2"
    dest: "{{ prometheus_conf_path }}/rules/alert_{{ item }}.rules"
    owner: root
    group: root
    mode: 0644
    validate: "/bin/promtool check rules %s"
  with_items:
    - '{{ prometheus_alert_rules }}'
  when:
    - prometheus_alert_rules != []
  notify: 'Reload prometheus service'

- name: Register exporter service with an http health check
  uri:
    url: 'http://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"ID":"{{ inventory_hostname | upper }}_prometheus_exporter","name":"prometheus_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ prometheus_port.prometheus }},"meta":{"instance":"{{ inventory_hostname | upper }}","group":"{{ group_names[0] | upper }}","environment":"{{ environments | upper }}"},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ prometheus_port.prometheus }}/metrics","interval":"60s","tls_skip_verify":true,"method":"GET","timeout":"5s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients|flatten(levels=1) }}'
  when: consul_public_register
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false

- name: Register exporter service with an http health check
  uri:
    url: 'http://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"ID":"{{ inventory_hostname | upper }}_alertmanager_exporter","name":"alertmanager_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ prometheus_port.alertmanager }},"meta":{"instance":"{{ inventory_hostname | upper }}","group":"{{ group_names[0] | upper }}","environment":"{{ environments | upper }}"},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ prometheus_port.alertmanager }}/metrics","interval":"60s","tls_skip_verify":true,"method":"GET","timeout":"5s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients|flatten(levels=1) }}'
  when: consul_public_register
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false
