---
- name: Generate IP address filter.
  set_fact:
    ip_sequence: "{{ ip_sequence | default([]) + [item[-1] | int] }}"
  with_sequence: start={{ prometheus_server.index(ansible_default_ipv4.address) }} end={{ prometheus_server | length * 4 }} stride=2
  args:
    warn: false
  changed_when: false
  failed_when: false
  ignore_errors: true

- name: Creating Prometheus configure folder.
  file:
    dest: '{{ prometheus_conf_path }}/{{ item }}'
    state: 'directory'
    owner: 'prometheus'
    group: 'prometheus'
    mode: '0750'
  loop:
    - 'rules'
    - 'templates'
    - 'conf.d'

- name: Creating Prometheus data folder.
  file:
    dest: '{{ prometheus_data_path }}/{{ item }}'
    state: 'directory'
    owner: 'prometheus'
    group: 'prometheus'
    mode: '0750'
  loop: '{{ prometheus_service }}'

- name: Prometheus configure file transfer.
  template:
    src: '{{ item.src }}.j2'
    dest: '{{ item.dest }}'
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop: '{{ prometheus_conf_files }}'
  notify: 'Restart prometheus service.'

- name: Prometheus alerting template file transfer.
  copy:
    src: "default.tmpl"
    dest: "{{ prometheus_conf_path }}/templates/default.tmpl"
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: 'Reload prometheus service.'

- name: Include rules for alertmanager.
  include_vars:
    file: 'alert_rules/{{ item }}.yml'
  loop: '{{ prometheus_alert_rules }}'
  when: prometheus_alert_rules != []

- name: Gather target label name variables.
  set_fact:
    tags_key: >-
      {% for key,value in tags.iteritems() %},{{ key }}{% endfor %}
  when: prometheus_alert_rules != []

- name: Prometheus alerting rules template file transfer.
  template:
    src: 'alert.rules.j2'
    dest: '/tmp/alert_{{ item }}.rules.j2'
  loop: '{{ prometheus_alert_rules }}'
  run_once: true
  delegate_to: localhost
  when: prometheus_alert_rules != []

- name: Prometheus alerting rules generate.
  template:
    src: '/tmp/alert_{{ item }}.rules.j2'
    dest: '{{ prometheus_conf_path }}/rules/alert_{{ item }}.rules'
    variable_start_string: "<<"
    variable_end_string: ">>"
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0644'
    validate: "/bin/promtool check rules %s"
  loop: '{{ prometheus_alert_rules }}'
  when: prometheus_alert_rules != []
  notify: 'Reload prometheus service.'

- name: Prometheus alerting rules template erase.
  file:
    path: "/tmp/alert_{{ item }}.rules.j2"
    state: 'absent'
  loop: '{{ prometheus_alert_rules }}'
  delegate_to: localhost
  run_once: true
  when: prometheus_alert_rules != []
