---
- name: Check current trickster version
  command: '/usr/local/bin/trickster --version'
  register: trickster_current_version
  changed_when: false
  failed_when: false

- name: Delete existing trickster version if different
  file:
    path: '/usr/local/bin/trickster'
    state: absent
  when:
    - trickster_current_version.stdout is defined
    - trickster_arg.version not in trickster_current_version.stdout

- name: Install trickster
  block:
    - name: Trickster download
      get_url:
        url: '{{ trickster_soft_url }}/v{{ trickster_arg.version }}/trickster-{{ trickster_arg.version }}.{{ ansible_system|lower }}-{{ architecture[ansible_architecture] }}.gz'
        dest: '/tmp'
        timeout: '60'
        validate_certs: 'no'
      register: result
    - name: Trickster uncompress
      shell: 'gunzip -c /tmp/trickster-{{ trickster_arg.version }}.{{ ansible_system|lower }}-{{ architecture[ansible_architecture] }}.gz > /usr/local/bin/trickster'
      when: result is succeeded
    - name: Trickster permission
      file:
        path: '/usr/local/bin/trickster'
        owner: 'root'
        group: 'root'
        mode: '0755'
      when: result is succeeded
      register: trickster_upgrade
    - name: Trickster compress file destroy
      file:
        path: '/tmp/trickster-{{ trickster_arg.version }}.{{ ansible_system|lower }}-{{ architecture[ansible_architecture] }}.gz'
        state: 'absent'
  when:
    - trickster_current_version.rc == 2 or trickster_arg.version not in trickster_current_version.stdout
  ignore_errors: true

- name: Trickster systemd service file transfer
  template:
    src: 'trickster.service.j2'
    dest: '/lib/systemd/system/trickster.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: trickster_systemd

- name: Trickster configure file transfer
  template:
    src: 'trickster.conf.j2'
    dest: '/etc/trickster.conf'
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: trickster_config

- name: Register exporter service with an http health check
  uri:
    url: 'http://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"ID":"{{ inventory_hostname | upper }}_trickster_exporter","name":"trickster_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ trickster_port.metrics }},"meta":{"instance":"{{ inventory_hostname | upper }}","group":"{{ group_names[0] | upper }}","environment":"{{ environments | upper }}"},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ trickster_port.metrics }}/metrics","interval":"60s","tls_skip_verify":true,"method":"HEAD","timeout":"5s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients|flatten(levels=1) }}'
  when: consul_public_register
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false