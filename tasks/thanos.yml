---
- name: Thanos base components systemd service file transfer
  template:
    src: 'thanos-{{ item }}.service.j2'
    dest: '/lib/systemd/system/thanos-{{ item }}.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ thanos_base_components }}'
  register: thanos_base_systemd

- name: Thanos base components default file transfer
  template:
    src: 'thanos-{{ item }}.default.j2'
    dest: '/etc/default/thanos-{{ item }}'
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ thanos_base_components }}'
  register: thanos_base_default

- name: Creating thanos data folder
  file:
    dest: '{{ prometheus_data_path }}/thanos'
    state: 'directory'
    owner: 'prometheus'
    group: 'prometheus'
    mode: '0755'
  when: thanos_bucket_is_used | bool

- name: Thanos objstore config file transfer
  template:
    src: 'bucket.yml.j2'
    dest: '{{ prometheus_data_path }}/thanos/bucket.yml'
    backup: 'yes'
    owner: 'prometheus'
    group: 'prometheus'
    mode: '0644'
  when: thanos_bucket_is_used | bool
  register: thanos_bucket

- name: Thanos optional components systemd service file transfer
  template:
    src: 'thanos-{{ item }}.service.j2'
    dest: '/lib/systemd/system/thanos-{{ item }}.service'
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ thanos_opti_components }}'
  when: thanos_bucket_is_used | bool
  register: thanos_opti_systemd

- name: Thanos optional components default file transfer
  template:
    src: 'thanos-{{ item }}.default.j2'
    dest: '/etc/default/thanos-{{ item }}'
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0644'
  with_items: '{{ thanos_opti_components }}'
  when: thanos_bucket_is_used | bool
  register: thanos_opti_default

- name: Creating thanos compact process folder
  file:
    dest: '{{ prometheus_data_path }}/compact'
    state: 'directory'
    owner: 'prometheus'
    group: 'prometheus'
    mode: '0755'
  when:
    - thanos_bucket_is_used | bool
    - prometheus_server[0] in ansible_default_ipv4.address

- name: Thanos compact systemd service file transfer
  template:
    src: 'thanos-compact.service.j2'
    dest: '/lib/systemd/system/thanos-compact.service'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when:
    - thanos_bucket_is_used | bool
    - prometheus_server[0] in ansible_default_ipv4.address
  register: thanos_compact_systemd

- name: Thanos compact default file transfer
  template:
    src: 'thanos-compact.default.j2'
    dest: '/etc/default/thanos-compact'
    backup: 'yes'
    owner: 'root'
    group: 'root'
    mode: '0644'
  when:
    - thanos_bucket_is_used | bool
    - prometheus_server[0] in ansible_default_ipv4.address
  register: thanos_compact_default

- name: Register exporter service with an http health check
  uri:
    url: 'http://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["prometheus","exporter"],"ID":"{{ inventory_hostname | upper }}_thanos-sidecar_exporter","name":"thanos-sidecar_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ thanos_port.sidecar_http }},"meta":{"instance":"{{ inventory_hostname | upper }}","group":"{{ group_names[0] | upper }}","environment":"{{ environments | upper }}"{% if tags is defined %},{{ tags | to_json | regex_replace("{") | regex_replace("}") }}{% endif %}},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ thanos_port.sidecar_http }}/metrics","interval":"60s","tls_skip_verify":true,"method":"HEAD","timeout":"10s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients|flatten(levels=1) }}'
  when:
    - exporter_is_install | bool
    - consul_public_register | bool
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false

- name: Register exporter service with an http health check
  uri:
    url: 'http://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["prometheus","exporter"],"ID":"{{ inventory_hostname | upper }}_thanos-query_exporter","name":"thanos-query_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ thanos_port.query_http }},"meta":{"instance":"{{ inventory_hostname | upper }}","group":"{{ group_names[0] | upper }}","environment":"{{ environments | upper }}"{% if tags is defined %},{{ tags | to_json | regex_replace("{") | regex_replace("}") }}{% endif %}},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ thanos_port.query_http }}/metrics","interval":"60s","tls_skip_verify":true,"method":"HEAD","timeout":"10s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients|flatten(levels=1) }}'
  when:
    - exporter_is_install | bool
    - consul_public_register | bool
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false

- name: Register exporter service with an http health check
  uri:
    url: 'http://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["prometheus","exporter"],"ID":"{{ inventory_hostname | upper }}_thanos-store_exporter","name":"thanos-store_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ thanos_port.store_http }},"meta":{"instance":"{{ inventory_hostname | upper }}","group":"{{ group_names[0] | upper }}","environment":"{{ environments | upper }}"{% if tags is defined %},{{ tags | to_json | regex_replace("{") | regex_replace("}") }}{% endif %}},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ thanos_port.store_http }}/metrics","interval":"60s","tls_skip_verify":true,"method":"HEAD","timeout":"10s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients|flatten(levels=1) }}'
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false
  when:
    - exporter_is_install | bool
    - consul_public_register | bool
    - thanos_bucket_is_used | bool

- name: Register exporter service with an http health check
  uri:
    url: 'http://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["prometheus","exporter"],"ID":"{{ inventory_hostname | upper }}_thanos-compact_exporter","name":"thanos-compact_exporter","address":"{{ ansible_default_ipv4.address }}","port":{{ thanos_port.compact_http }},"meta":{"instance":"{{ inventory_hostname | upper }}","group":"{{ group_names[0] | upper }}","environment":"{{ environments | upper }}"{% if tags is defined %},{{ tags | to_json | regex_replace("{") | regex_replace("}") }}{% endif %}},"checks":[{"http":"http://{{ ansible_default_ipv4.address }}:{{ thanos_port.compact_http }}/metrics","interval":"60s","tls_skip_verify":true,"method":"HEAD","timeout":"10s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients|flatten(levels=1) }}'
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false
  when:
    - exporter_is_install | bool
    - consul_public_register | bool
    - thanos_bucket_is_used | bool
    - prometheus_server[0] in ansible_default_ipv4.address
