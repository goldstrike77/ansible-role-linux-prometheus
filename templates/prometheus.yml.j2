# Global configuration
global:
  scrape_interval:     {{ prometheus_arg.scrape_interval }}
  scrape_timeout:      {{ prometheus_arg.scrape_timeout }}
  evaluation_interval: {{ prometheus_arg.evaluation_interval }}
  external_labels:
    cluster: centralized
    prometheus_replica: {{ ansible_hostname|upper }}
{% if prometheus_external_labels is defined %}
{% for key,value in prometheus_external_labels.iteritems() %}
    {{ key }}: '{{ value }}'
{% endfor %}
{% endif %}

# Alertmanager configuration
alerting:
  alert_relabel_configs:
    - regex: 'replica|job|ipaddress|metrics_path|scheme|application|domain'
      action: labeldrop
  alertmanagers:
    - static_configs:
      - targets: ['{{ prometheus_server | list | join(":" + prometheus_port.alertmanager + "', '") }}:{{ prometheus_port.alertmanager }}']

# Rule configuration
rule_files:
  - {{ prometheus_conf_path }}/rules/*.rules

# Scrape configuration
scrape_configs:
{% if prometheus_consul_server is defined and prometheus_consul_token is defined %}
  - job_name: 'unAuthenticate exporters'
    tls_config:
      insecure_skip_verify: true
    consul_sd_configs:
      - server: '{{ prometheus_consul_server }}'
        token: {{ prometheus_consul_token }}
        refresh_interval: {{ prometheus_arg.refresh_interval }}
        services: ['{{ "_exporter', '".join(vars["unauthenticate_target_services"]) }}_exporter']
        scheme: {{ consul_public_http_prot }}
        tls_config:
          insecure_skip_verify: true
    relabel_configs:
      - regex: job
        action: labeldrop
      - source_labels: [__meta_consul_service_address]
        target_label: 'ipaddress'
      - regex: __meta_consul_service_metadata_(.+)
        action: labelmap
      - source_labels: [__meta_consul_service]
        replacement: '${1}'
        target_label: 'service'
        regex: '([^=]+)_exporter'
      - source_labels: [__meta_consul_service_metadata_metrics_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__meta_consul_service_metadata_scheme]
        action: replace
        target_label: __scheme__
        regex: (.+)
{% if prometheus_server | length > 3 %}
      - source_labels: [__address__]
        regex: '.+[{{ ip_sequence | list | unique | sort | join("") }}]:.+'
        action: 'drop'
{% endif %}
  - job_name: 'Authenticate exporters'
    basic_auth:
      username: 'prometheus'
      password: 'tj@VH9ECytRF'
    tls_config:
      insecure_skip_verify: true
    consul_sd_configs:
      - server: '{{ prometheus_consul_server }}'
        token: {{ prometheus_consul_token }}
        refresh_interval: {{ prometheus_arg.refresh_interval }}
        services: ['{{ "_exporter', '".join(vars["authenticate_target_services"]) }}_exporter']
        scheme: {{ consul_public_http_prot }}
        tls_config:
          insecure_skip_verify: true
    relabel_configs:
      - regex: job
        action: labeldrop
      - source_labels: [__meta_consul_service_address]
        target_label: 'ipaddress'
      - regex: __meta_consul_service_metadata_(.+)
        action: labelmap
      - source_labels: [__meta_consul_service]
        replacement: '${1}'
        target_label: 'service'
        regex: '([^=]+)_exporter'
      - source_labels: [__meta_consul_service_metadata_metrics_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__meta_consul_service_metadata_scheme]
        action: replace
        target_label: __scheme__
        regex: (.+)
{% if prometheus_server | length > 3 %}
      - source_labels: [__address__]
        regex: '.+[{{ ip_sequence | list | unique | sort | join("") }}]:.+'
        action: 'drop'
{% endif %}
{% if prometheus_prober_exporters is defined %}
  - job_name: 'Probers'
    consul_sd_configs:
      - server: '{{ prometheus_consul_server }}'
        token: {{ prometheus_consul_token }}
        refresh_interval: {{ prometheus_arg.refresh_interval }}
        services: ['{{ "_prober', '".join(vars["prometheus_prober_exporters"]) }}_prober']
        scheme: {{ consul_public_http_prot }}
        tls_config:
          insecure_skip_verify: true
    relabel_configs:
      - regex: job
        action: labeldrop
      - regex: __meta_consul_service_metadata_(.+)
        action: labelmap
      - source_labels: [__meta_consul_service_metadata_target]
        target_label: '__param_target'
      - source_labels: [__meta_consul_service_metadata_module]
        target_label: '__param_module'
      - source_labels: [__meta_consul_service_metadata_address]
        action: replace
        target_label: __address__
        regex: (.+)
      - source_labels: [__meta_consul_service_metadata_metrics_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
{% endif %}
{% endif %}
{% if prometheus_kubernetes is defined %}
{% for host in prometheus_kubernetes %}
{% if host.node_discover.enable | bool %}
  - job_name: 'Kubernetes kubelet - {{ host.apiserver | default("127.0.0.1") }}'
    scheme: https
    bearer_token: '{{ host.token | default("xxx") }}'
    tls_config:
      insecure_skip_verify: true
    kubernetes_sd_configs:
      - role: node
        api_server: 'https://{{ host.apiserver | default("127.0.0.1") }}'
        bearer_token: '{{ host.token | default("xxx") }}'
        tls_config:
          insecure_skip_verify: true
    relabel_configs:
      - regex: job
        action: labeldrop
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: {{ host.apiserver | default("127.0.0.1") }}
      - source_labels: [__address__]
        action: replace
        target_label: application
        replacement: Kubernetes
      - source_labels: [__address__]
        action: replace
        target_label: service
        replacement: kubelet
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
      - source_labels: [__address__]
        target_label: k8s_role_type
        replacement: "node"
  - job_name: 'Kubernetes cadvisor - {{ host.apiserver | default("127.0.0.1") }}'
    scheme: https
    bearer_token: '{{ host.token | default("xxx") }}'
    tls_config:
      insecure_skip_verify: true
    kubernetes_sd_configs:
      - role: node
        api_server: 'https://{{ host.apiserver | default("127.0.0.1") }}'
        bearer_token: '{{ host.token | default("xxx") }}'
        tls_config:
          insecure_skip_verify: true
    relabel_configs:
      - regex: job
        action: labeldrop
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: {{ host.apiserver | default("127.0.0.1") }}
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      - source_labels: [__address__]
        target_label: k8s_role_type
        replacement: "node"
{% endif %}
{% if host.pod_discover.enable | bool %}
  - job_name: 'Kubernetes pod - {{ host.apiserver | default("127.0.0.1") }}'
    scheme: {{ host.pod_discover.scheme | default("http") }}
    bearer_token: '{{ host.token | default("xxx") }}'
    tls_config:
      insecure_skip_verify: true
    kubernetes_sd_configs:
      - role: pod
        api_server: 'https://{{ host.apiserver | default("127.0.0.1") }}'
        bearer_token: '{{ host.token | default("xxx") }}'
        tls_config:
          insecure_skip_verify: true
    relabel_configs:
      - regex: job
        action: labeldrop
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_ip]
        action: replace
        replacement: $1:{{ host.pod_discover.port | default("8080") }}
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod_name
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: container_name
      - source_labels: [__meta_kubernetes_pod_label_context]
        action: replace
        regex: (.+)
        target_label: __metrics_path__
        replacement: /$1/{{ host.pod_discover.metrics_path | default("prometheus") }}
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_metrics_path]
        action: replace
        regex: (.+)
        target_label: __metrics_path__
        replacement: /$1/{{ host.pod_discover.metrics_path | default("prometheus") }}
      - source_labels: [__address__]
        target_label: k8s_role_type
        replacement: "pod"
{% endif %}
{% endfor %}
{% endif %}
{% if prometheus_azure_monitor is defined %}
# The maximum metric count of requests allowed by Azure Monitor rest API is 20.
{% if "Microsoft.Cache/Redis" in prometheus_azure_monitor.resources %}
  - job_name: 'Azure Cache for Redis'
    metrics_path: /probe/metrics/list
    params:
      name: ["azure_redis"]
      subscription: ['{{ prometheus_azure_monitor.subscription | list | join("','") }}'] 
      filter: ["resourceType eq 'Microsoft.Cache/Redis'"]
      metric: ["cachehits","cacheLatency","cachemisses","cachemissrate","cacheRead","cacheWrite","connectedclients","errors","evictedkeys","expiredkeys","getcommands","operationsPerSecond","percentProcessorTime","serverLoad","setcommands","totalcommandsprocessed","totalkeys","usedmemory","usedmemorypercentage","usedmemoryRss"]
      interval: ["PT1M"]
      timespan: ["PT1M"]
      aggregation: ["average"]
    static_configs:
      - targets: [":{{ prometheus_port.azure_monitor | default('9276') }}"]
    relabel_configs:
      - regex: job
        action: labeldrop
    metric_relabel_configs:
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'subscription'
        regex: '^\/subscriptions\/(\S+).*/resource[gG]roups\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'resourcegroup'
        regex: '.*/resource[gG]roups\/(\S+).*/providers\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'host'
        regex: '.*/Microsoft.Cache\/Redis\/(\S+).*'
      - action: labeldrop
        regex: 'interval|timespan|unit|resourceID'
{% endif %}
{% if "Microsoft.DBforMySQL/servers" in prometheus_azure_monitor.resources %}
  - job_name: 'Azure Database for MySQL'
    metrics_path: /probe/metrics/list
    params:
      name: ["azure_mysql"]
      subscription: ['{{ prometheus_azure_monitor.subscription | list | join("','") }}']
      filter: ["resourceType eq 'Microsoft.DBforMySQL/servers'"]
      metric: ["active_connections","connections_failed","cpu_percent","io_consumption_percent","memory_percent","network_bytes_egress","network_bytes_ingress","seconds_behind_master","serverlog_storage_limit","serverlog_storage_percent","serverlog_storage_usage","storage_limit","storage_percent","storage_used"]
      interval: ["PT1M"]
      timespan: ["PT1M"]
      aggregation: ['average']
    static_configs:
      - targets: [":{{ prometheus_port.azure_monitor | default('9276') }}"]
    relabel_configs:
      - regex: job
        action: labeldrop
    metric_relabel_configs:
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'subscription'
        regex: '^\/subscriptions\/(\S+).*/resource[gG]roups\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'resourcegroup'
        regex: '.*/resource[gG]roups\/(\S+).*/providers\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'host'
        regex: '.*/Microsoft.DB[fF]orMySQL\/servers\/(\S+).*'
      - action: labeldrop
        regex: 'interval|timespan|unit|resourceID'
{% endif %}
{% if "Microsoft.DBforPostgreSQL/servers" in prometheus_azure_monitor.resources %}
  - job_name: 'Azure Database for PostgreSQL'
    metrics_path: /probe/metrics/list
    params:
      name: ["azure_pgsql"]
      subscription: ['{{ prometheus_azure_monitor.subscription | list | join("','") }}']
      filter: ["resourceType eq 'Microsoft.DBforPostgreSQL/servers'"]
      metric: ["active_connections","backup_storage_used","connections_failed","cpu_percent","io_consumption_percent","memory_percent","network_bytes_egress","network_bytes_ingress","pg_replica_log_delay_in_bytes","pg_replica_log_delay_in_seconds","serverlog_storage_limit","serverlog_storage_percent","serverlog_storage_usage","storage_limit","storage_percent","storage_used"]
      interval: ["PT15M"]
      timespan: ["PT15M"]
      aggregation: ['average']
    static_configs:
      - targets: [":{{ prometheus_port.azure_monitor | default('9276') }}"]
    relabel_configs:
      - regex: job
        action: labeldrop
    metric_relabel_configs:
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'subscription'
        regex: '^\/subscriptions\/(\S+).*/resource[gG]roups\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'resourcegroup'
        regex: '.*/resource[gG]roups\/(\S+).*/providers\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'host'
        regex: '.*/Microsoft.DB[fF]orPostgreSQL\/servers\/(\S+).*'
      - action: labeldrop
        regex: 'interval|timespan|unit|resourceID'
{% endif %}
{% if "microsoft.network/virtualnetworkgateways" in prometheus_azure_monitor.resources %}
  - job_name: 'Azure Virtual network gateway'
    metrics_path: /probe/metrics/list
    params:
      name: ["azure_virtualnetworkgateway"]
      subscription: ['{{ prometheus_azure_monitor.subscription | list | join("','") }}']
      filter: ["resourceType eq 'microsoft.network/virtualnetworkgateways'"]
      metric: ["AverageBandwidth","P2SBandwidth","TunnelAverageBandwidth","TunnelEgressBytes","TunnelIngressBytes","TunnelEgressPackets","TunnelIngressPackets","P2SConnectionCount","TunnelEgressPacketDropTSMismatch","TunnelIngressPacketDropTSMismatch"]
      interval: ["PT5M"]
      timespan: ["PT5M"]
      aggregation: ['average']
    static_configs:
      - targets: [":{{ prometheus_port.azure_monitor | default('9276') }}"]
    relabel_configs:
      - regex: job
        action: labeldrop
    metric_relabel_configs:
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'subscription'
        regex: '^\/subscriptions\/(\S+).*/resource[gG]roups\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'resourcegroup'
        regex: '.*/resource[gG]roups\/(\S+).*/providers\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'host'
        regex: '.*/Microsoft.Network\/virtualNetworkGateways\/(\S+).*'
      - action: labeldrop
        regex: 'interval|timespan|unit|resourceID'
{% endif %}
{% if "Microsoft.Sql/servers/elasticPools" in prometheus_azure_monitor.resources %}
  - job_name: 'Azure SQL Elastic pool'
    metrics_path: /probe/metrics/list
    params:
      name: ["azure_sqlelasticpool"]
      subscription: ['{{ prometheus_azure_monitor.subscription | list | join("','") }}']
      filter: ["resourceType eq 'Microsoft.Sql/servers/elasticPools'"]
      metric: ["cpu_limit","cpu_percent","log_write_percent","physical_data_read_percent","sessions_percent","storage_limit","storage_percent","storage_used","tempdb_data_size","tempdb_log_size","tempdb_log_used_percent","workers_percent","xtp_storage_percent"]
      interval: ["PT1M"]
      timespan: ["PT1M"]
      aggregation: ['average']
    static_configs:
      - targets: [":{{ prometheus_port.azure_monitor | default('9276') }}"]
    relabel_configs:
      - regex: job
        action: labeldrop
    metric_relabel_configs:
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'subscription'
        regex: '^\/subscriptions\/(\S+).*/resource[gG]roups\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'resourcegroup'
        regex: '.*/resource[gG]roups\/(\S+).*/providers\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'host'
        regex: '.*/Microsoft.Sql\/servers\/(\S+).*\/elasticpools(\S+)'
      - action: labeldrop
        regex: 'interval|timespan|unit|resourceID'
{% endif %}
{% if "Microsoft.Sql/managedInstances" in prometheus_azure_monitor.resources %}
  - job_name: 'Azure SQL Managed Instance'
    metrics_path: /probe/metrics/list
    params:
      name: ["azure_sqlmanagedinstance"]
      subscription: ['{{ prometheus_azure_monitor.subscription | list | join("','") }}']
      filter: ["resourceType eq 'Microsoft.Sql/managedInstances'"]
      metric: ["avg_cpu_percent","io_bytes_read","io_bytes_written","io_requests","reserved_storage_mb","storage_space_used_mb","virtual_core_count"]
      interval: ["PT1M"]
      timespan: ["PT1M"]
      aggregation: ['average']
    static_configs:
      - targets: [":{{ prometheus_port.azure_monitor | default('9276') }}"]
    relabel_configs:
      - regex: job
        action: labeldrop
    metric_relabel_configs:
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'subscription'
        regex: '^\/subscriptions\/(\S+).*/resource[gG]roups\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'resourcegroup'
        regex: '.*/resource[gG]roups\/(\S+).*/providers\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'host'
        regex: '.*/Microsoft.Sql\/managedInstances\/(\S+).*'
      - action: labeldrop
        regex: 'interval|timespan|unit|resourceID'
{% endif %}
{% if "Microsoft.Storage/storageAccounts" in prometheus_azure_monitor.resources %}
  - job_name: 'Azure Storage Accounts'
    metrics_path: /probe/metrics/list
    params:
      name: ["azure_storageaccounts"]
      subscription: ['{{ prometheus_azure_monitor.subscription | list | join("','") }}']
      filter: ["resourceType eq 'Microsoft.Storage/storageAccounts'"]
      metric: ["Availability","Egress","Ingress","SuccessE2ELatency","SuccessServerLatency","Transactions","UsedCapacity"]
      interval: ["PT1H"]
      timespan: ["PT1H"]
      aggregation: ['average']
    static_configs:
      - targets: [":{{ prometheus_port.azure_monitor | default('9276') }}"]
    relabel_configs:
      - regex: job
        action: labeldrop
    metric_relabel_configs:
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'subscription'
        regex: '^\/subscriptions\/(\S+).*/resource[gG]roups\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'resourcegroup'
        regex: '.*/resource[gG]roups\/(\S+).*/providers\/(\S+)'
      - source_labels: [resourceID]
        replacement: '${1}'
        target_label: 'host'
        regex: '.*/Microsoft.Storage\/storageAccounts\/(\S+).*'
      - action: labeldrop
        regex: 'interval|timespan|unit|resourceID'
{% endif %}
{% endif %}
